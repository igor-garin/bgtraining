package ru.igarin.bgtraining.utils;

import android.os.Environment;
import android.text.TextUtils;

import com.crashlytics.android.Crashlytics;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Calendar;
import java.util.Date;

/**
 * Extended logger.
 *
 * @author A.Tsvetkov 2010 http://tsvetkov.at.ua mailto:al@ukr.net
 */
public final class L {

    public static final String TAG = "getroute_driver";
    public static final boolean useFileLog = false;

    public static final String LOG_FILE = "/." + TAG + ".txt";
    public static final String DATE_FORMAT = "dd.MM.yyyy_kk.mm.ss";

    @SuppressWarnings("all")
    public static class LogConfig {

        private LogConfig() {
        }

        /**
         * Log Level variables
         */
        private static final int DP_LOG_LEVEL_VERBOSE = 5;
        private static final int DP_LOG_LEVEL_DEBUG = 4;
        private static final int DP_LOG_LEVEL_INFO = 3;
        private static final int DP_LOG_LEVEL_WARNING = 2;
        private static final int DP_LOG_LEVEL_ERROR = 1;
        private static final int DP_LOG_LEVEL_NONE = 0;

        /**
         * Set this flag to {@link LogConfig#DP_LOG_LEVEL_NONE} when releasing
         * your application in order to remove all logs generated by DataDroid.
         */
        private static final int DP_LOG_LEVEL = DP_LOG_LEVEL_VERBOSE;

        public static final boolean DP_VERBOSE_LOGS_ENABLED = (DP_LOG_LEVEL == DP_LOG_LEVEL_VERBOSE);
        public static final boolean DP_DEBUG_LOGS_ENABLED = (DP_LOG_LEVEL >= DP_LOG_LEVEL_DEBUG);
        public static final boolean DP_INFO_LOGS_ENABLED = (DP_LOG_LEVEL >= DP_LOG_LEVEL_INFO);
        public static final boolean DP_WARNING_LOGS_ENABLED = (DP_LOG_LEVEL >= DP_LOG_LEVEL_WARNING);
        public static final boolean DP_ERROR_LOGS_ENABLED = (DP_LOG_LEVEL >= DP_LOG_LEVEL_ERROR);
    }

    // ==========================================================

    private static final Object[] DATA_LOCK = new Object[0];
    private static File logFile = new File(Environment
            .getExternalStorageDirectory().getAbsolutePath() + LOG_FILE);

    private static boolean appendStringToFile(final String... appendContents) {
        boolean result = false;
        try {
            synchronized (DATA_LOCK) {
                if (logFile != null) {
                    logFile.createNewFile(); // ok if returns false, overwrite
                    Writer out = new BufferedWriter(new FileWriter(logFile,
                            true), 1024);
                    for (String s : appendContents) {
                        out.write(s + ";");
                    }
                    out.write("\n");
                    out.close();
                    result = true;
                }
            }
        } catch (IOException e) {
            // Log.e(Constants.LOG_TAG, "Error appending string data to file " +
            // e.getMessage(), e);
        }
        return result;
    }

    public static String getFormattedDate() {
        final Calendar c = Calendar.getInstance();
        c.setTime(new Date(System.currentTimeMillis()));
        return android.text.format.DateFormat.format(DATE_FORMAT, c).toString();
    }

    // ==========================================================

    private static final String POSFIX_STRING = ")";
    private static final String PREFIX_STRING = "> (";
    private static final String PREFIX_MAIN_STRING = " > ";

    /**
     * Send a VERBOSE log message.
     *
     * @param msg The message you would like logged.
     */
    public static void v(String msg) {
        if (LogConfig.DP_VERBOSE_LOGS_ENABLED) {
            this_v(TAG, getLocation() + " " + msg);
        }
    }

    /**
     * Send a DEBUG log message.
     *
     * @param msg The message you would like logged.
     */
    public static void d(String msg) {
        if (LogConfig.DP_DEBUG_LOGS_ENABLED) {
            this_d(TAG, getLocation() + " " + msg);
        }
    }

    /**
     * Send a INFO log message.
     *
     * @param msg The message you would like logged.
     */
    public static void i(String msg) {
        if (LogConfig.DP_INFO_LOGS_ENABLED) {
            this_i(TAG, getLocation() + " " + msg);
        }
    }

    /**
     * Send a WARN log message.
     *
     * @param msg The message you would like logged.
     */
    public static void w(String msg) {
        if (LogConfig.DP_WARNING_LOGS_ENABLED) {
            this_w(TAG, getLocation() + " " + msg);
        }
    }

    /**
     * Send a ERROR log message.
     *
     * @param msg The message you would like logged.
     */
    public static void e(String msg) {
        if (LogConfig.DP_ERROR_LOGS_ENABLED) {
            this_e(TAG, getLocation() + " " + msg);
        }
    }

    // ==========================================================

    /**
     * Send a VERBOSE log message and log the exception.
     *
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void v(String msg, Exception e) {
        if (LogConfig.DP_VERBOSE_LOGS_ENABLED) {
            this_v(TAG, getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a DEBUG log message and log the exception.
     *
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void d(String msg, Exception e) {
        if (LogConfig.DP_DEBUG_LOGS_ENABLED) {
            this_d(TAG, getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a INFO log message and log the exception.
     *
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void i(String msg, Exception e) {
        if (LogConfig.DP_INFO_LOGS_ENABLED) {
            this_i(TAG, getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a WARN log message and log the exception.
     *
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void w(String msg, Exception e) {
        if (LogConfig.DP_WARNING_LOGS_ENABLED) {
            this_w(TAG, getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a ERROR log message and log the exception.
     *
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void e(String msg, Exception e) {
        if (LogConfig.DP_ERROR_LOGS_ENABLED) {
            this_e(TAG, getLocation() + " " + msg, e);
        }
    }

    // ==========================================================

    /**
     * Send a VERBOSE log the exception.
     *
     * @param tr An exception to log
     */
    public static void v(Exception e) {
        if (LogConfig.DP_VERBOSE_LOGS_ENABLED) {
            this_v(TAG, getLocation(), e);
        }
    }

    /**
     * Send a DEBUG log the exception.
     *
     * @param tr An exception to log
     */
    public static void d(Exception e) {
        if (LogConfig.DP_DEBUG_LOGS_ENABLED) {
            this_d(TAG, getLocation(), e);
        }
    }

    /**
     * Send a INFO log the exception.
     *
     * @param tr An exception to log
     */
    public static void i(Exception e) {
        if (LogConfig.DP_INFO_LOGS_ENABLED) {
            this_i(TAG, getLocation(), e);
        }
    }

    /**
     * Send a WARN log the exception.
     *
     * @param tr An exception to log
     */
    public static void w(Exception e) {
        if (LogConfig.DP_WARNING_LOGS_ENABLED) {
            this_w(TAG, getLocation(), e);
        }
    }

    /**
     * Send a ERROR log the exception.
     *
     * @param tr An exception to log
     */
    public static void e(Exception e) {
        Crashlytics.logException(e);
        if (LogConfig.DP_ERROR_LOGS_ENABLED) {
            this_e(TAG, getLocation(), e);
        }
    }

    // ==========================================================

    /**
     * Send a <b>VERBOSE</b> log message. Using when you extend any Class and
     * wont to receive full info in LogCat tag. Usually you can use "this" in
     * "obj" parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumberClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     */
    public static void v(Object obj, String msg) {
        if (LogConfig.DP_VERBOSE_LOGS_ENABLED) {
            this_v(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg);
        }
    }

    /**
     * Send a <b>DEBUG</b> log message. Using when you extend any Class and wont
     * to receive full info in LogCat tag. Usually you can use "this" in "obj"
     * parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     */
    public static void d(Object obj, String msg) {
        if (LogConfig.DP_DEBUG_LOGS_ENABLED) {
            this_d(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg);
        }
    }

    /**
     * Send a <b>INFO</b> log message. Using when you extend any Class and wont
     * to receive full info in LogCat tag. Usually you can use "this" in "obj"
     * parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     */
    public static void i(Object obj, String msg) {
        if (LogConfig.DP_INFO_LOGS_ENABLED) {
            this_i(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg);
        }
    }

    /**
     * Send a <b>WARN</b> log message. Using when you extend any Class and wont
     * to receive full info in LogCat tag. Usually you can use "this" in "obj"
     * parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     */
    public static void w(Object obj, String msg) {
        if (LogConfig.DP_WARNING_LOGS_ENABLED) {
            this_w(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg);
        }
    }

    /**
     * Send a <b>ERROR</b> log message. Using when you extend any Class and wont
     * to receive full info in LogCat tag. Usually you can use "this" in "obj"
     * parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     */
    public static void e(Object obj, String msg) {
        if (LogConfig.DP_ERROR_LOGS_ENABLED) {
            this_e(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg);
        }
    }

    // ==========================================================

    /**
     * Send a <b>VERBOSE</b> log message and log the exception. Using when you
     * extend any Class and wont to receive full info in LogCat tag. Usually you
     * can use "this" in "obj" parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void v(Object obj, String msg, Exception e) {
        if (LogConfig.DP_VERBOSE_LOGS_ENABLED) {
            this_v(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a <b>DEBUG</b> log message and log the exception. Using when you
     * extend any Class and wont to receive full info in LogCat tag. Usually you
     * can use "this" in "obj" parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void d(Object obj, String msg, Exception e) {
        if (LogConfig.DP_DEBUG_LOGS_ENABLED) {
            this_d(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a <b>INFO</b> log message and log the exception. Using when you
     * extend any Class and wont to receive full info in LogCat tag. Usually you
     * can use "this" in "obj" parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void i(Object obj, String msg, Exception e) {
        if (LogConfig.DP_INFO_LOGS_ENABLED) {
            this_i(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a <b>WARN</b> log message and log the exception. Using when you
     * extend any Class and wont to receive full info in LogCat tag. Usually you
     * can use "this" in "obj" parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param msg The message you would like logged.
     * @param tr  An exception to log
     */
    public static void w(Object obj, String msg, Exception e) {
        if (LogConfig.DP_WARNING_LOGS_ENABLED) {
            this_w(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg, e);
        }
    }

    /**
     * Send a <b>ERROR</b> log message and log the exception. Using when you
     * extend any Class and wont to receive full info in LogCat tag. Usually you
     * can use "this" in "obj" parameter. As result you receive tag string
     * "<b>(Called Main Class) LogginClass:MethodInLogginClass:lineNumber</b>"
     *
     * @param obj main class
     * @param tr  An exception to log
     * @param msg The message you would like logged.
     */
    public static void e(Object obj, String msg, Exception e) {
        if (LogConfig.DP_ERROR_LOGS_ENABLED) {
            this_e(TAG, PREFIX_STRING + obj.getClass().getSimpleName()
                    + POSFIX_STRING + getLocation() + " " + msg, e);
        }
    }

    private static String getLocation() {
        final String className = L.class.getName();
        final StackTraceElement[] traces = Thread.currentThread()
                .getStackTrace();
        boolean found = false;
        for (int i = 0; i < traces.length; i++) {
            StackTraceElement trace = traces[i];

            try {
                if (found) {
                    if (!trace.getClassName().startsWith(className)) {
                        Class<?> clazz = Class.forName(trace.getClassName());
                        return PREFIX_MAIN_STRING + getClassName(clazz) + ":"
                                + trace.getMethodName() + ":"
                                + trace.getLineNumber();
                    }
                } else if (trace.getClassName().startsWith(className)) {
                    found = true;
                    continue;
                }
            } catch (ClassNotFoundException e) {
            }
        }
        return "[]: ";
    }

    private static String getClassName(Class<?> clazz) {
        if (clazz != null) {
            if (!TextUtils.isEmpty(clazz.getSimpleName())) {
                return clazz.getSimpleName();
            }

            return getClassName(clazz.getEnclosingClass());
        }

        return "";
    }

    // ======================================================

    private static void this_v(String tag, String msg) {
        android.util.Log.v(tag, msg);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_d(String tag, String msg) {
        android.util.Log.d(tag, msg);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_i(String tag, String msg) {
        android.util.Log.i(tag, msg);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_w(String tag, String msg) {
        android.util.Log.w(tag, msg);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_e(String tag, String msg) {
        android.util.Log.e(tag, msg);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_v(String tag, String msg, Throwable tr) {
        android.util.Log.v(tag, msg, tr);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_d(String tag, String msg, Throwable tr) {
        android.util.Log.d(tag, msg, tr);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_i(String tag, String msg, Throwable tr) {
        android.util.Log.i(tag, msg, tr);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_w(String tag, String msg, Throwable tr) {
        android.util.Log.w(tag, msg, tr);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }

    private static void this_e(String tag, String msg, Throwable tr) {
        android.util.Log.e(tag, msg, tr);
        if (useFileLog) {
            appendStringToFile(getFormattedDate(), getLocation(), msg);
        }
    }
}